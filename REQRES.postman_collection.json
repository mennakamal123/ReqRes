{
	"info": {
		"_postman_id": "48eb6da1-4431-4e00-8f00-e9f078d77a8f",
		"name": "REQRES",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26699027"
	},
	"item": [
		{
			"name": "CREATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"pm.environment.set(\"userId\",jsonData.id) ;\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"1-|1-Check name DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"2-|1-Check job DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.job).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"3-|1-Check id DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"4-|1-Check CreatedAt DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"1-|2-Check Response Body includes name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"});\r",
							"pm.test(\"2-|2-Check Response Body includes job\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"job\");\r",
							"});\r",
							"pm.test(\"3-|2-Check Response Body includes id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"4-|2-Check Response Body includes CreatedAt\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"1-|3-Check name value\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"    });\r",
							" pm.test(\"2-|3-Check job value\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.job).to.eql(\"leader\");\r",
							"    });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/users"
			},
			"response": []
		},
		{
			"name": "LIST USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"Check page number\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"pm.test(\"Users per page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"});\r",
							"pm.test(\"Total pages number\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.total_pages).to.eql(2);\r",
							"});\r",
							"pm.test(\"Check values of a user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[2].id).to.eql(9);\r",
							"    pm.expect(jsonData.data[2].email).to.eql(\"tobias.funke@reqres.in\");\r",
							"    pm.expect(jsonData.data[2].first_name).to.eql(\"Tobias\");\r",
							"    pm.expect(jsonData.data[2].last_name).to.eql(\"Funke\");\r",
							"    pm.expect(jsonData.data[2].avatar).to.eql(\"https://reqres.in/img/faces/9-image.jpg\");\r",
							"});\r",
							"pm.test(\"Check user in response body contains all fields \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0]).to.have.property(\"id\");\r",
							"     pm.expect(jsonData.data[0]).to.have.property(\"email\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"1-|1-Check ID DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.a(\"number\");\r",
							"});\r",
							"pm.test(\"2-|1-Check email DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.email).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"3-|1-Check first name DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.first_name).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"4-|1-Check last name DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.last_name).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"4-|1-Check avatar DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.avatar).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"1-|2-Check Response Body includes ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
							"});\r",
							"pm.test(\"2-|2-Check Response Body includes email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
							"});\r",
							"pm.test(\"3-|2-Check Response Body includes first name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.property(\"first_name\");\r",
							"});\r",
							"\r",
							"pm.test(\"4-|2-Check Response Body includes last name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.property(\"last_name\");\r",
							"});\r",
							"pm.test(\"4-|2-Check Response Body includes avatar\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.property(\"avatar\");\r",
							"});\r",
							"pm.test(\"1-|3-Check ID value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.eql(2);\r",
							"});\r",
							"pm.test(\"2-|3-Check email value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.email).to.eql(\"janet.weaver@reqres.in\");\r",
							"});\r",
							"\r",
							"pm.test(\"3-|3-Check first name value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.first_name).to.eql(\"Janet\");\r",
							"});\r",
							"pm.test(\"3-|3-Check last name value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.last_name).to.eql(\"Weaver\");\r",
							"});\r",
							"pm.test(\"3-|3-Check avatar value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.avatar).to.eql(\"https://reqres.in/img/faces/2-image.jpg\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/api/users/2"
			},
			"response": []
		},
		{
			"name": "SINGLE USER NOT FOUND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/api/users/23"
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"1-|1-Check name DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"2-|1-Check job DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.job).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"3-|1-Check updatedAt DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"1-|2-Check Response Body includes name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"});\r",
							"pm.test(\"2-|2-Check Response Body includes job\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"job\");\r",
							"});\r",
							"pm.test(\"3-|2-Check Response Body includes updatedAt\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
							"});\r",
							"\r",
							"\r",
							" pm.test(\"1-|3-Check name value\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"    });\r",
							" pm.test(\"2-|3-Check job value\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/users/2"
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"1-|1-Check name DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"3-|1-Check updatedAt DataType\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.updatedAt).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"1-|2-Check Response Body includes name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"3-|2-Check Response Body includes updatedAt\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
							"});\r",
							"\r",
							"\r",
							" pm.test(\"1-|3-Check name value\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.name).to.eql(\"morpheu\");\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheu\"\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/users/2"
			},
			"response": []
		},
		{
			"name": "USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{baseUrl}}/api/users/2"
			},
			"response": []
		},
		{
			"name": "REGISTER - SUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"1-|2-Check Response Body includes ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"pm.test(\"2-|2-Check Response Body includes token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});\r",
							"pm.test(\"check response body contains id value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"pm.test(\"check response body contains token value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.not.eql(null);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/register"
			},
			"response": []
		},
		{
			"name": "REGISTER - UNSUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"2-|2-Check Response Body includes error\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"pm.test(\"3-|3-Check error value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/register"
			},
			"response": []
		},
		{
			"name": "LOGIN - SUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"2-|2-Check Response Body includes token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});\r",
							"pm.test(\"check response body contains token value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.not.eql(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/login"
			},
			"response": []
		},
		{
			"name": "LOGIN - UNSUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"2-|2-Check Response Body includes error\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"pm.test(\"3-|3-Check error value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/login"
			},
			"response": []
		}
	]
}